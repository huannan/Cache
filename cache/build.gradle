apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.github.dcendents.android-maven'

android {
    compileSdkVersion build_versions.compile_sdk
    buildToolsVersion build_versions.build_tools

    defaultConfig {
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode build_versions.cache_version_code
        versionName build_versions.cache_version_name

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation("org.jetbrains.kotlin:kotlin-stdlib:$build_versions.kotlin")
    implementation("androidx.core:core-ktx:$versions.androidx_core_ktx")
    implementation("androidx.appcompat:appcompat:$versions.androidx_appcompat")
    implementation("androidx.constraintlayout:constraintlayout:$versions.androidx_constraintlayout")
    testImplementation("junit:junit:$versions.java_junit")
    androidTestImplementation("androidx.test.ext:junit:$versions.androidx_junit")
    androidTestImplementation("androidx.test.espresso:espresso-core:$versions.androidx_espresso_core")
    // 微信MMKV
    implementation("com.tencent:mmkv:${versions.mmkv}")
    // RxJava
    implementation("io.reactivex.rxjava2:rxjava:${versions.rxjava2}")
    implementation("io.reactivex.rxjava2:rxandroid:${versions.rxandroid2}")
    // FastJSON
    implementation("com.alibaba:fastjson:${versions.fastjson}")
}